import { ethers } from "ethers";
import { useState } from "react";
import { useRouter } from "next/router";
import Web3Modal from "web3modal";
import NFT from "../Engine/CreateCustomNFT.json";
import Market from "../Engine/Market.json";
import { hhnft, hhmarket } from "../Engine/configuration";
import {
  Card,
  Button,
  Input,
  Col,
  Row,
  Spacer,
  Container,
  Text,
  Grid,
} from "@nextui-org/react";
import { client } from "../Engine/configuration.js";
import "sf-font";
import Image from "next/image";

export default function CreateMarket() {
  const [fileUrl, setFileUrl] = useState(null);
  //this is how we are going to ask for the url for the nft image.
  const [formInput, updateFormInput] = useState({
    price: "",
    name: "",
    description: "",
  });
  //this is for import data into the site. Asked for the price, name and description. This is metadata exeption of price, this is will be used for rendering the sell

  const router = useRouter();

  async function onChange(e) {
    const file = e.target.files[0];
    //this is what we are going to give to the html button when we ask for the file. //this is how we trough the image inside next JS
    try {
      //
      const added = await client.add(file, {
        progress: (prog) => console.log(`received: ${prog}`),
      });
      //this add the file into ipfss
      const url = `https://ipfs.infura.io/ipfs/${added.path}`;
      //this is the public url from ifura, and at the end we add the new path of the uploaded file.

      setFileUrl(url);

      //now we store this into our useState...
    } catch (error) {
      console.log("Error uploading file: ", error);
    }

    //this is how we upload images into next JS.
  }

  async function createMarket() {
    const { name, description, price } = formInput;
    // this is all the information that we get from the user input.. and then will be stored in the state. We will build an html form for getting all those vealues.

    //this will only trigger when all the metadata is created and then we can call the function createNFT.

    if (!name || !description || !price || !fileUrl) return;
    //if there is non of those const exist, then do nothing.
    const data = JSON.stringify({
      name,
      description,
      image: fileUrl,
    });
    //this is a metadata generation.
    try {
      const added = await client.add(data);
      const url = `https://ipfs.infura.io/ipfs/${added.path}`;
      createNFT(url);
      //  this function is defined under.
    } catch (error) {
      console.log("Error uploading file: ", error);
    }
  }

  async function createNFT(url) {
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const signer = provider.getSigner();

    //until here is a normal web3 conection.

    let contract = new ethers.Contract(hhnft, NFT, signer);

    //here I am calling the CustomNFT smart contract, that takes as parameters the address, the abiData, and the signer that is right now conected in Metamask.

    let transaction = await contract.createNFT(url);

    //this awaits that the createNFT gets called correctly under the smart contract.
    //this is not the same function where we are right now, even if they have the same name, it is refering to the same function but inside of the smart contract.

    let tx = await transaction.wait();

    //this is another transaction.. because we need to wait for the transaction on top to be completed.

    //after this step, we are going to transfer the recently created NFT to the marketplace... more or less like the other resell market contract, however this is a different market contract.
    let event = tx.events[0];

    //if we were to consolelog the event generated by this transaction, we would see that the value would be stored in the arguments array in the index 2.

    let value = event.args[2];

    // and so we create the value variable, by calling the event.args[2]
    let tokenId = value.toNumber();

    // then we give the value of it to the tokenID.
    const price = ethers.utils.parseUnits(formInput.price, "ether");
    // we create a variable price, that we are going to get from the formInput, the user types form. then we use ethers to parse this value into smartcontract terms (Uint)
    contract = new ethers.Contract(hhmarket, Market, signer);
    //now we call the market smart contract.
    let listingFee = await contract.listingFee();
    //then we call the listing fee, that is already defined in the market smart contract.
    listingFee = listingFee.toString();
    // then we change the value parsing it to string.
    transaction = await contract.createVaultItem(hhnft, tokenId, price, {
      value: listingFee,
    });

    //then we change the value of the transaction, by adding the nft into the marketplace address giving as parametesr, the address of the nftcontract, the newly created tokenId, and the price given by the user, and lastly the listing fee, that was already defined in the market smart contract.
    await transaction.wait();
    //we await for the transaction to complete and then we push to the homepage.
    router.push("/");
  }

  async function buyNFT() {
    //this function is basically the same as create market, but instead the user will keep the NFT.
    const { name, description } = formInput;
    //we are going to get this information from the formInput.
    if (!name || !description || !fileUrl) return;
    const data = JSON.stringify({
      name,
      description,
      image: fileUrl,
    });
    //this will create the metadata
    try {
      const added = await client.add(data);
      //this will add the metadata
      const url = `https://ipfs.infura.io/ipfs/${added.path}`;
      mintNFT(url);
      //then this call the mint nft function that will also call the mintNFT function of the smartcontract CreateCustomNFT.
    } catch (error) {
      console.log("Error uploading file: ", error);
    }
  }

  async function mintNFT(url) {
    //This function will allow the user to mint the NFT without having to list it in the marketplace, and basically is doing the same as the createNFT function, but witout passing the new nft into the marketplace vault.
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const signer = provider.getSigner();
    //until here we do a normal conection
    let contract = new ethers.Contract(hhnft, NFT, signer);
    //we call the nftcontract
    let cost = await contract.cost();
    //we create a cost vale, calling the cost function inside the nftcontract, and it was already predifined in the contract 0.075 ethers.
    let transaction = await contract.mintNFT(url, { value: cost });
    // then we create a transaction where we call the mint function from the nft smartcontract, and feed it with the parameters its needs.. in this case the url of the ipfs uploaded document, and the cost.
    await transaction.wait();
    // we wait for the transaction to complete and puush to the portal page where it should show the newly created nft.
    router.push("/portal");
  }

  return (
    <div>
      <Spacer></Spacer>
      <Container
        lg
        gap={2}
        css={{ fontFamily: "SF Pro Display", fontWeight: "200" }}
      >
        <Text h2>NFT Creator Portal</Text>
        <Row gap={4}>
          <Col>
            <Spacer></Spacer>
            <Spacer></Spacer>
            <Spacer></Spacer>
            <Text h3 className="ml-3">
              The NFT Marketplace with a Reward.
            </Text>
            <Text h3>N2DR IS More Than A Token</Text>
            <Spacer></Spacer>
            <Image src="/" height="300" width="300" alt="logo" />
          </Col>
          <Col css={{ marginRight: "$7" }}>
            <Spacer></Spacer>
            <Card css={{ marginTop: "$5", marginBottom: "$5" }}>
              <Card.Body style={{ backgroundColor: "#00000040" }}>
                <Text>
                  Select your Preferred Network, Create your Amazing NFT by
                  uploading your art using the simple NFT Dashboard. Simple!
                </Text>
              </Card.Body>
            </Card>
            <Image
              alt="agnostic"
              width="350"
              height={200}
              src="/chainagnostic.png"
            />
            <Card css={{ marginTop: "$5" }}>
              <Card.Body style={{ backgroundColor: "#00000040" }}>
                <Text>
                  Chain-Agnostic Marketplace that allows you to sell your NFT
                  and accept your favorite crypto as payment! No borders, No
                  restrictions. Simple!
                </Text>
              </Card.Body>
            </Card>
          </Col>
          <Col>
            <Spacer></Spacer>
            <Text h3>Create and Sell your NFT in the Marketplace</Text>
            <Card
              style={{
                maxWidth: "300px",
                background: "#ffffff05",
                boxShadow: "0px 0px 5px #ffffff60",
              }}
            >
              <Card css={{ marginTop: "$1" }}>
                <Card.Body style={{ backgroundColor: "#000000" }}>
                  <Input
                    placeholder="Enter your NFT Name"
                    onChange={(e) =>
                      updateFormInput({ ...formInput, name: e.target.value })
                    }
                  />
                </Card.Body>
              </Card>
              <Card>
                <Card.Body style={{ backgroundColor: "#000000" }}>
                  <Input
                    placeholder="NFT Description"
                    onChange={(e) =>
                      updateFormInput({
                        ...formInput,
                        description: e.target.value,
                      })
                    }
                  />
                </Card.Body>
              </Card>
              <Card>
                <Card.Body style={{ backgroundColor: "#000000" }}>
                  <input type="file" name="Asset" onChange={onChange} />
                  {fileUrl && (
                    <Image
                      className="rounded "
                      width="350"
                      height="350"
                      src={fileUrl}
                      alt="nft"
                    />
                  )}
                  {/* this is how you update  files into nextJS*/}
                </Card.Body>
              </Card>
              <Container css={{ marginBottom: "$2" }}>
                <Input
                  css={{ marginTop: "$2" }}
                  placeholder="Set your price in eth"
                  onChange={(e) =>
                    updateFormInput({ ...formInput, price: e.target.value })
                  }
                />
                <Button
                  size="sm"
                  style={{ fontSize: "20px" }}
                  onPress={createMarket}
                  css={{
                    marginTop: "$2",
                    marginBottom: "$5",
                    color: "$gradient",
                  }}
                >
                  List your NFT!
                </Button>
                <Button
                  size="sm"
                  style={{ fontSize: "20px" }}
                  onPress={buyNFT}
                  css={{
                    marginTop: "$2",
                    marginBottom: "$5",
                    color: "$gradient",
                  }}
                >
                  Buy your NFT!
                </Button>
              </Container>
            </Card>
          </Col>
        </Row>
      </Container>
    </div>
  );
}
